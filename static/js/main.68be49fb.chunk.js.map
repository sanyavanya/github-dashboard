{"version":3,"sources":["img/spinner.png","components/SearchField.js","components/RepoList.js","components/Paginator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchField","onInputChange","input","placeholder","className","type","value","onChange","RepoList","items","heading","Paginator","pagesAmount","page","onPageChange","paginator","key","i","linkStyle","newPageLink","onClick","style","display","separator","concat","id","App","buildSearchQuiery","q","url","itemsPerPage","state","event","setState","target","localStorage","setItem","JSON","stringify","loading","delayChecker","setTimeout","setItems","Number","innerHTML","openCard","link","repoResponse","languagesDiv","contributorsDiv","fetch","options","then","response","json","size","description","cardDiv","src","owner","avatar_url","alt","href","html_url","login","name","role","aria-label","stargazers_count","updated_at","slice","card","route","languages_url","langResponse","keys","k","push","listAggregator","length","newLi","contributors_url","contributorsResponse","Array","isArray","count","total_count","tableHead","aggregator","newDiv","substr","tableBody","table","pagesAmountMax","tempPagesAmount","Math","floor","catch","err","cardName","contributors","languages","method","headers","data","getItem","parse","this","itemsDynamic","require","headingDynamic","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.68be49fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.23616449.png\";","import React from 'react';\r\n\r\nconst SearchField = ({ onInputChange, input }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input placeholder='search on GitHub' className='br3 f4 pa2 w-70' type='text' value = {input} onChange={onInputChange}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchField;","import React from 'react';\r\nimport \"./RepoList.css\"\r\n\r\n\r\nconst RepoList = ({ items, heading }) => {\r\n\treturn (\r\n\t\t<div className=\"repoList\">\r\n\t\t\t\t{items}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default RepoList;","import React from 'react';\r\nimport \"./Paginator.css\";\r\n\r\nconst Paginator = ({ pagesAmount, page, onPageChange }) => {\r\n\tlet paginator = [];\r\n\tif (pagesAmount > 1) {\r\n\t\tpaginator = [<span key=\"leftbracket\">[ </span>];\t\t\r\n\t\tfor (let i = 1; i <= pagesAmount; i++) {\r\n\t\t\tlet linkStyle = 'pageLink';\r\n\t\t\tif (i === page) linkStyle += ' current';\r\n\t\t\tlet newPageLink = [\r\n\t            <li key ={i} className={linkStyle} onClick={onPageChange} style={{display: \"inline\"}}>{i}</li>\r\n\t          ];\r\n\t        let separator = [<span key={`separator ${i}`}>, </span>];\r\n\t        if (i < pagesAmount) newPageLink = newPageLink.concat(separator);\r\n\t\t\tpaginator = paginator.concat(newPageLink);\r\n\t    }\r\n\t    paginator = paginator.concat(<span key=\"rightbracket\"> ]</span>);\r\n    }\r\n\r\n\treturn (\r\n\t\t<div id='paginator'>{paginator}</div>\r\n\t)\r\n}\r\n\r\nexport default Paginator;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport SearchField from './components/SearchField';\nimport RepoList from './components/RepoList';\nimport Paginator from './components/Paginator';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      card: '',\n      cardName: '',\n      contributors: [],\n      heading: [<h2 key='mostpop'>Top 10 GitHub repositories:</h2>],\n      languages: [],      \n      input: '',\n      items: [],\n      loading: true,\n      page: 1,\n      pagesAmount: 1,\n      route: 'home'   \n    }\n    this.itemsPerPage = 10;\n    this.options = {\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }    \n    }\n    this.pagesAmountMax = 10;\n  }\n\n  buildSearchQuiery = (q) => {\n    let url = 'https://api.github.com/search/repositories?q=';\n    url += (q === '') ? 'stars%3A%3E100' : q;\n    url += `&sort=stars&order=desc&per_page=${this.itemsPerPage}&page=${this.state.page}`;\n    return url;\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n    this.setState({ page: 1 });\n    localStorage.setItem(\"state\", JSON.stringify(this.state));\n    this.setState({ loading: true });\n\n    let delayChecker = '';\n    setTimeout(() => { delayChecker = this.state.input }, 0);\n    \n    setTimeout(() => { \n      if (delayChecker === this.state.input) setTimeout(() => this.setItems(), 0); // waiting for the user to stop typing before fetching data\n    }, 600)\n  }\n\n  onPageChange = (i) => {\n    this.setState({ page: Number(i.target.innerHTML) });\n    localStorage.setItem(\"state\", JSON.stringify(this.state));\n    setTimeout(() => this.setItems(), 0);\n  }\n\n  openCard = (link) => {\n    this.setState({ loading: true });    \n    let repoResponse = '';\n    let languagesDiv = [];\n    let contributorsDiv = [];    \n\n    setTimeout(() => {\n      fetch(link, this.options)\n      .then(response => response.json())\n      .then(response => {\n        repoResponse = response;\n        if (repoResponse.size === 0) {\n          repoResponse.description = \"This repo is empty.\";\n          let cardDiv = [\n              <div key=\"cardDiv\" className=\"cardDiv\">\n                <div className=\"ownerDiv\">\n                  <img src={repoResponse.owner.avatar_url} alt=\"avatar\" className=\"userpic\"/><br/>\n                  <a href={repoResponse.owner.html_url} className=\"fatName\">{repoResponse.owner.login}</a>\n                </div>\n                <div className=\"repoDiv\">\n                  <h3 className=\"repoName\"><a href={repoResponse.html_url} className=\"fatLink\">{repoResponse.name}</a></h3>\n                  <span className=\"repoStars\"><span role=\"img\" aria-label=\"star\">⭐</span>{repoResponse.stargazers_count}</span>\n                  <br/>Last commit: {repoResponse.updated_at.slice(0,-10)} at {repoResponse.updated_at.slice(11,-4)}<br/><br/>\n                  {repoResponse.description}<br/><br/>\n                </div>\n              </div>\n            ];\n            this.setState({ loading: false });\n            this.setState({ card: cardDiv });\n            this.setState({ route: 'card' });\n            localStorage.setItem(\"state\", JSON.stringify(this.state)); \n          return;\n        }\n\n        // aggregating language list\n        fetch(repoResponse.languages_url, this.options)\n        .then(langResponse => langResponse.json())\n        .then(langResponse => {\n          let keys = [];\n          for (let k in langResponse) keys.push(k);\n          let listAggregator = [];\n          if (keys.length !== 0) {\n            for (let i = 0; i < keys.length; i++) {\n              let newLi = [<li key={\"lang li #\" + i}>{keys[i]}</li>];\n              listAggregator = listAggregator.concat(newLi);\n            }\n            languagesDiv = <div key=\"languages list\"><div className=\"listTitle\">Languages used:</div><ul key=\"languages list\">{listAggregator}</ul></div>;\n          }\n        })\n        .then(() => {\n          // aggregating contributors list\n          fetch(response.contributors_url, this.options)\n          .then(contributorsResponse => contributorsResponse.json())\n          .then(contributorsResponse => {\n            let listAggregator = [];\n\n            if (Array.isArray(contributorsResponse)) {\n              let count = 10;\n              if (contributorsResponse.length < 10) count = contributorsResponse.length;\n              for (let i = 0; i < count; i++) {\n                let newLi = [<li key={\"contr li #\" + i}>{contributorsResponse[i].login}</li>];\n                listAggregator = listAggregator.concat(newLi);\n              }\n              if (contributorsResponse.length === 1) contributorsDiv = <div key=\"contributors list\">{contributorsResponse[0].login} is the only contributor.</div>;\n              else contributorsDiv = <div key=\"contributors list\"><div className=\"listTitle\">Top 10 contributors:</div><ul>{listAggregator}</ul></div>;\n            } else contributorsDiv = <div key=\"contributors list\">The history or contributor list is too large to list contributors for this repository via the API.</div>;\n          })\n          .then(() => {\n            let cardDiv = [\n              <div key=\"cardDiv\" className=\"cardDiv\">\n                <div className=\"ownerDiv\">\n                  <img src={repoResponse.owner.avatar_url} alt=\"avatar\" className=\"userpic\"/><br/>\n                  <a href={repoResponse.owner.html_url} className=\"fatName\">{repoResponse.owner.login}</a>\n                </div>\n                <div className=\"repoDiv\">\n                  <h3 className=\"repoName\"><a href={repoResponse.html_url} className=\"fatLink\">{repoResponse.name}</a></h3>\n                  <span className=\"repoStars\"><span role=\"img\" aria-label=\"star\">⭐</span>{repoResponse.stargazers_count}</span>\n                  <br/>Last commit: {repoResponse.updated_at.slice(0,-10)} at {repoResponse.updated_at.slice(11,-4)}<br/><br/>\n                  {repoResponse.description}<br/><br/>             \n                  {languagesDiv}\n                  {contributorsDiv}<br/>\n                </div>\n              </div>\n            ];\n            this.setState({ loading: false });\n            this.setState({ card: cardDiv });\n            this.setState({ route: 'card' });\n            localStorage.setItem(\"state\", JSON.stringify(this.state));   \n          })     \n        })\n      })\n    }, 0);\n  }\n\n  setItems = () => {\n    let url = this.buildSearchQuiery(this.state.input);\n    this.setState({ loading: true });\n\n    fetch(url, this.options)\n      .then(response => response.json())\n      .then(response => {\n        this.setState({ loading: false });\n\n        // setting up repo list\n        if (response.total_count > 0) {\n          let count = this.itemsPerPage;\n          if (response.total_count < 10) count = response.total_count;\n\n          if (this.state.input === '') this.setState({ heading: [<h2 key='top10'>Top 10 GitHub repositories:</h2>] });\n          else this.setState({ heading: [<h2 key='mostpop'>Most starred “{this.state.input}” repositories on GitHub:</h2>] });\n\n          let tableHead = [<thead key='thead'><tr><th>Rank</th><th>Name</th><th>Rating</th><th>Updated</th><th>URL</th></tr></thead>];\n          let aggregator = [];\n\n          for (let i = 0; i < count; i++) {\n            let newDiv = [\n                <tr key={'key'+i}><td>#{this.itemsPerPage * (this.state.page-1) + i+1}</td>\n                <td><span className=\"fatName\" onClick={()=>this.openCard(response.items[i].url)}>{response.items[i].name}</span></td>\n                <td><span role=\"img\" aria-label=\"star\">⭐</span>{response.items[i].stargazers_count}</td>\n                <td>{response.items[i].updated_at.slice(0,-10)}</td>\n                <td><a href={response.items[i].html_url} className=\"fatLink\">{response.items[i].html_url.substr(8)}</a></td></tr>\n            ];\n            aggregator = aggregator.concat(newDiv);\n          }\n          let tableBody = [<tbody key='tbody'>{aggregator}</tbody>]\n          let table = [<table key='table'>{tableHead}{tableBody}</table>]\n\n          this.setState({ items: table });\n          localStorage.setItem(\"state\", JSON.stringify(this.state));\n\n          // setting up Paginator\n          if (this.state.input !== '') {\n            if (response.total_count >= this.itemsPerPage * this.pagesAmountMax) this.setState({ pagesAmount: this.pagesAmountMax });\n            else {\n              let tempPagesAmount = Math.floor(response.total_count / this.itemsPerPage);\n              if (response.total_count % this.itemsPerPage !== 0) tempPagesAmount++;\n              this.setState({ pagesAmount: tempPagesAmount });\n              localStorage.setItem(\"state\", JSON.stringify(this.state));\n            }\n          }\n          else {\n            this.setState({ pagesAmount: 1 });\n            localStorage.setItem(\"state\", JSON.stringify(this.state));\n          }\n        } else {\n          this.setState({ heading: [<h2 key='notfound'>No “{this.state.input}” repositories found on GitHub!</h2>] , items: [], pagesAmount: 1, page: 1} );\n        }\n      })\n\n      .catch(err => {\n        this.setState({ loading: false });\n        this.setState({ items: [<div key=\"err\">We are limited to 10 requests per minute :(</div>] , heading: [<h2 key='mostpop'>Oops!</h2>] });\n        localStorage.setItem(\"state\", JSON.stringify(this.state));\n      });    \n  }\n\n  componentDidMount() {\n    let data = localStorage.getItem(\"state\");\n    if (data) {\n      data = JSON.parse(data);\n      this.setState({\n        input: data.input,\n        page: data.page\n      });\n    }\n    setTimeout(() => this.setItems(), 0);\n  }\n\n  render() {\n    let itemsDynamic = [<div key='spinner' className='spinnerWrap'><img src={require('./img/spinner.png')} alt =\"...\" className='spinner'/></div>], headingDynamic = [<h2 key='mostpop'>Loading...</h2>];\n    if (!this.state.loading) {\n      itemsDynamic = this.state.items;\n      headingDynamic = this.state.heading;\n    }\n\n    return (\n      <div className=\"App\">\n        <h1><span id=\"gh\">GitHub</span> <span id=\"db\">Dashboard</span></h1>\n        { this.state.route === 'home'\n          ? \n          <div>\n            <SearchField\n              onInputChange = {this.onInputChange}\n              input = {this.state.input}\n            />\n            {headingDynamic}\n            <RepoList\n              items={itemsDynamic}\n            />\n            <Paginator pagesAmount = {this.state.pagesAmount} page = {this.state.page} onPageChange = {this.onPageChange}/>\n          </div>\n          :\n          <div>\n            <span className=\"fatName\" onClick={() => this.setState({ route: 'home' })}>← Back to Dashboard</span><br/><br/>\n            {this.state.card}\n          </div>\n        }\n        <footer>©2020 <a href=\"https://github.com/sanyavanya\">@sanyavanya</a></footer>  \n      </div>\n    ); \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}